{"version":3,"sources":["apiClient.js","Components/Header.js","Components/Footer.js","Components/LeftBar.js","Components/RightBar.js","Components/Maps.js","App.js","serviceWorker.js","index.js"],"names":["client","axios","create","json","liveClient","APIClient","accessToken","this","perform","method","resource","data","url","then","resp","Header","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","React","Component","Footer","LeftBar","state","events","Accordion","bsPrefix","Card","as","Button","variant","eventKey","Body","withRouter","RightBar","Maps","lat","lng","zoom","shape","pins","geoJsonShapeLayer","createRef","geoJsonPinsLayer","apiClient","getShape","current","leafletElement","clearLayers","addData","setState","color","weight","fillOpacity","fillColor","position","center","TileLayer","attribution","GeoJSON","ref","features","style","geoJSONStyle","App","value","repos","user","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ebb5a98.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst BASE_URI = 'http://0.0.0.0:2000/api/v1/';\n\nconst client = axios.create({\n //baseURL: BASE_URI,\n json: true\n});\n\nconst liveClient = axios.create({\n  json:true\n})\nclass APIClient {\n constructor(accessToken) {\n   this.accessToken = accessToken;\n }\n\n getShape() {\n   return this.perform('get', 'https://glenviewil.data.socrata.com/resource/idy3-5zs6.geojson?$select=the_geom,ori')\n }\n\n getPins() {\n   return this.perform('get', 'pins.geojson?domain=glenviewil.data.socrata.com&shape=u2ma-9vv5&prop=call_type')\n }\n\n getEvents() {\n   return this.perform('get', 'events');\n }\n\n  async performLive (method, resource, data) {\n    return liveClient({\n      method,\n      url: resource\n    }).then(resp => {\n      return resp.data ? resp.data : [];\n    })\n  }\n\n async perform (method, resource, data) {\n   return client({\n     method,\n     url: resource\n   }).then(resp => {\n     return resp.data ? resp.data : [];\n   })\n }\n}\n\nexport default APIClient;\n","import React from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nclass Header extends React.Component {\n  render() {\n      return (\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"/\">Citizen Connect</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/\">Organizations</Nav.Link>\n              <Nav.Link href=\"/\">Events</Nav.Link>\n            </Nav>\n            <Nav.Link href=\"/\">Login</Nav.Link>\n          </Navbar.Collapse>\n        </Navbar>\n      );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport '../Styles/Footer.css';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\n\nclass Footer extends React.Component {\n  render() {\n      return (\n        <Navbar className=\"footer\" bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"/\">Citizen Connect</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/\">Home</Nav.Link>\n              <Nav.Link href=\"/\">Organizations</Nav.Link>\n              <Nav.Link href=\"/\">Events</Nav.Link>\n            </Nav>\n            <Nav.Link href=\"/\">Login</Nav.Link>\n          </Navbar.Collapse>\n        </Navbar>\n      );\n  }\n}\n\nexport default Footer;\n","import '../Styles/Left.css';\nimport React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport APIClient from '../apiClient';\n\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nclass LeftBar extends React.Component {\n    state = {\n       events: []\n     };\n    async componentDidMount() {\n    }\n    render() {\n        return (\n          <Accordion bsPrefix=\"left\">\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                  Overview\n                </Accordion.Toggle>\n              </Card.Header>\n            </Card>\n\n              <Accordion.Collapse className=\"filters\" eventKey=\"1\">\n                <Card className=\"filters\">\n                  <Card.Body>All The Filters</Card.Body>\n                </Card>\n              </Accordion.Collapse>\n\n          </Accordion>\n        );\n    }\n}\n\nexport default withRouter(LeftBar);\n","import '../Styles/Event.css';\nimport React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport APIClient from '../apiClient';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\nclass RightBar extends React.Component {\n    state = {\n       events: []\n     };\n    async componentDidMount() {\n    }\n    render() {\n        return (\n          <Accordion bsPrefix=\"right\">\n            <Card>\n              <Card.Header>\n                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"1\">\n                  Filters\n                </Accordion.Toggle>\n              </Card.Header>\n            </Card>\n\n              <Accordion.Collapse className=\"filters\" eventKey=\"1\">\n                <Card className=\"filters\">\n                  <Card.Body>All The Filters</Card.Body>\n                </Card>\n              </Accordion.Collapse>\n\n          </Accordion>\n        );\n    }\n}\n\nexport default withRouter(RightBar);\n","import '../Styles/Map.css';\nimport React from 'react';\nimport {withRouter} from 'react-router-dom';\nimport APIClient from '../apiClient';\n\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet';\n\ntype State = {\n  lat: number,\n  lng: number,\n  zoom: number,\n}\n\nclass Maps extends React.Component {\n    state = {\n      lat: 42.241577,\n      lng: -87.87302399999999,\n      zoom: 10,\n      shape: {},\n      pins: {}\n    }\n    geoJsonShapeLayer = React.createRef()\n    geoJsonPinsLayer = React.createRef()\n\n    async componentDidMount() {\n        const accessToken = \"TEST\"\n        this.apiClient = new APIClient(accessToken);\n        this.apiClient.getShape().then((data) => {\n          this.geoJsonShapeLayer.current.leafletElement.clearLayers().addData(data)\n          this.setState({...this.state, shape: data})\n        });\n        /*\n        this.apiClient.getPins().then((data) => {\n          this.geoJsonPinsLayer.current.leafletElement.clearLayers().addData(data)\n          this.setState({...this.state, pins: data})\n        });*/\n    }\n    geoJSONStyle() {\n      return {\n        color: '#1f2021',\n        weight: 1,\n        fillOpacity: 0.5,\n        fillColor: '#fff2af',\n      }\n    }\n    render() {\n      const position = [this.state.lat, this.state.lng]\n      return (\n        <Map center={position} zoom={this.state.zoom}>\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n          <GeoJSON\n            ref={this.geoJsonShapeLayer}\n            data={this.state.shape.features}\n            style={this.geoJSONStyle}\n          />\n          /*\n          <GeoJSON\n            ref={this.geoJsonPinsLayer}\n            data={this.state.pins.features}\n            style={this.geoJSONStyle}\n          />*/\n        </Map>\n      )\n    }\n}\n\nexport default withRouter(Maps);\n","import React from 'react';\nimport './Styles/App.css';\nimport APIClient from './apiClient';\n\n\n// Took Specifics\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport LeftBar from './Components/LeftBar';\nimport RightBar from './Components/RightBar';\nimport Maps from './Components/Maps';\n\nimport {\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nclass App extends React.Component {\n    state = {\n       value: 0,\n       repos: [],\n       user: {},\n       events: []\n     };\n    async componentDidMount() {\n     }\n  render() {\n      return (\n        <div className=\"App\">\n            <Header />\n            <Switch>\n               <Route path=\"/\">\n                  <div>\n                    <div className=\"left\">\n                      <LeftBar />\n                    </div>\n                    <div className=\"right\">\n                      <RightBar />\n                    </div>\n                    <div>\n                      <Maps />\n                    </div>\n                  </div>\n                </Route>\n            </Switch>\n            <Footer />\n        </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter as Router} from \"react-router-dom\";\nReactDOM.render(<Router><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}